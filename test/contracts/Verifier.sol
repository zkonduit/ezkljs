// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {
    function verify(
        uint256[] memory pubInputs,
        bytes memory proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[] memory transcript;
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xcc0, mod(mload(0xa0), f_q))mstore(0xce0, mod(mload(0xc0), f_q))mstore(0xd00, mod(mload(0xe0), f_q))mstore(0xca0, 19449721084891242670161178542643636635440486124687579340445485597024854804712)        {            let x := mload(0x120)            mstore(0xd20, x)            let y := mload(0x140)            mstore(0xd40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x160)            mstore(0xd60, x)            let y := mload(0x180)            mstore(0xd80, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x1a0)            mstore(0xda0, x)            let y := mload(0x1c0)            mstore(0xdc0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x1e0)            mstore(0xde0, x)            let y := mload(0x200)            mstore(0xe00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x220)            mstore(0xe20, x)            let y := mload(0x240)            mstore(0xe40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x260)            mstore(0xe60, x)            let y := mload(0x280)            mstore(0xe80, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xea0, keccak256(0xca0, 512)){            let hash := mload(0xea0)            mstore(0xec0, mod(hash, f_q))            mstore(0xee0, hash)        }        {            let x := mload(0x2a0)            mstore(0xf00, x)            let y := mload(0x2c0)            mstore(0xf20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x2e0)            mstore(0xf40, x)            let y := mload(0x300)            mstore(0xf60, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xf80, keccak256(0xee0, 160)){            let hash := mload(0xf80)            mstore(0xfa0, mod(hash, f_q))            mstore(0xfc0, hash)        }mstore8(0xfe0, 1)mstore(0xfe0, keccak256(0xfc0, 33)){            let hash := mload(0xfe0)            mstore(0x1000, mod(hash, f_q))            mstore(0x1020, hash)        }        {            let x := mload(0x320)            mstore(0x1040, x)            let y := mload(0x340)            mstore(0x1060, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x360)            mstore(0x1080, x)            let y := mload(0x380)            mstore(0x10a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x3a0)            mstore(0x10c0, x)            let y := mload(0x3c0)            mstore(0x10e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x3e0)            mstore(0x1100, x)            let y := mload(0x400)            mstore(0x1120, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x420)            mstore(0x1140, x)            let y := mload(0x440)            mstore(0x1160, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1180, keccak256(0x1020, 352)){            let hash := mload(0x1180)            mstore(0x11a0, mod(hash, f_q))            mstore(0x11c0, hash)        }        {            let x := mload(0x460)            mstore(0x11e0, x)            let y := mload(0x480)            mstore(0x1200, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x4a0)            mstore(0x1220, x)            let y := mload(0x4c0)            mstore(0x1240, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x4e0)            mstore(0x1260, x)            let y := mload(0x500)            mstore(0x1280, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x520)            mstore(0x12a0, x)            let y := mload(0x540)            mstore(0x12c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x560)            mstore(0x12e0, x)            let y := mload(0x580)            mstore(0x1300, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1320, keccak256(0x11c0, 352)){            let hash := mload(0x1320)            mstore(0x1340, mod(hash, f_q))            mstore(0x1360, hash)        }mstore(0x1380, mod(mload(0x5a0), f_q))mstore(0x13a0, mod(mload(0x5c0), f_q))mstore(0x13c0, mod(mload(0x5e0), f_q))mstore(0x13e0, mod(mload(0x600), f_q))mstore(0x1400, mod(mload(0x620), f_q))mstore(0x1420, mod(mload(0x640), f_q))mstore(0x1440, mod(mload(0x660), f_q))mstore(0x1460, mod(mload(0x680), f_q))mstore(0x1480, mod(mload(0x6a0), f_q))mstore(0x14a0, mod(mload(0x6c0), f_q))mstore(0x14c0, mod(mload(0x6e0), f_q))mstore(0x14e0, mod(mload(0x700), f_q))mstore(0x1500, mod(mload(0x720), f_q))mstore(0x1520, mod(mload(0x740), f_q))mstore(0x1540, mod(mload(0x760), f_q))mstore(0x1560, mod(mload(0x780), f_q))mstore(0x1580, mod(mload(0x7a0), f_q))mstore(0x15a0, mod(mload(0x7c0), f_q))mstore(0x15c0, mod(mload(0x7e0), f_q))mstore(0x15e0, mod(mload(0x800), f_q))mstore(0x1600, mod(mload(0x820), f_q))mstore(0x1620, mod(mload(0x840), f_q))mstore(0x1640, mod(mload(0x860), f_q))mstore(0x1660, mod(mload(0x880), f_q))mstore(0x1680, mod(mload(0x8a0), f_q))mstore(0x16a0, mod(mload(0x8c0), f_q))mstore(0x16c0, mod(mload(0x8e0), f_q))mstore(0x16e0, mod(mload(0x900), f_q))mstore(0x1700, mod(mload(0x920), f_q))mstore(0x1720, mod(mload(0x940), f_q))mstore(0x1740, mod(mload(0x960), f_q))mstore(0x1760, mod(mload(0x980), f_q))mstore(0x1780, mod(mload(0x9a0), f_q))mstore(0x17a0, mod(mload(0x9c0), f_q))mstore(0x17c0, mod(mload(0x9e0), f_q))mstore(0x17e0, mod(mload(0xa00), f_q))mstore(0x1800, mod(mload(0xa20), f_q))mstore(0x1820, mod(mload(0xa40), f_q))mstore(0x1840, mod(mload(0xa60), f_q))mstore(0x1860, mod(mload(0xa80), f_q))mstore(0x1880, mod(mload(0xaa0), f_q))mstore(0x18a0, mod(mload(0xac0), f_q))mstore(0x18c0, mod(mload(0xae0), f_q))mstore(0x18e0, mod(mload(0xb00), f_q))mstore(0x1900, mod(mload(0xb20), f_q))mstore(0x1920, mod(mload(0xb40), f_q))mstore(0x1940, mod(mload(0xb60), f_q))mstore(0x1960, mod(mload(0xb80), f_q))mstore(0x1980, keccak256(0x1360, 1568)){            let hash := mload(0x1980)            mstore(0x19a0, mod(hash, f_q))            mstore(0x19c0, hash)        }        {            let x := mload(0xba0)            mstore(0x19e0, x)            let y := mload(0xbc0)            mstore(0x1a00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0xbe0)            mstore(0x1a20, x)            let y := mload(0xc00)            mstore(0x1a40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0xc20)            mstore(0x1a60, x)            let y := mload(0xc40)            mstore(0x1a80, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0xc60)            mstore(0x1aa0, x)            let y := mload(0xc80)            mstore(0x1ac0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1ae0, keccak256(0x19c0, 288)){            let hash := mload(0x1ae0)            mstore(0x1b00, mod(hash, f_q))            mstore(0x1b20, hash)        }mstore(0x1b40, mulmod(mload(0x1340), mload(0x1340), f_q))mstore(0x1b60, mulmod(mload(0x1b40), mload(0x1b40), f_q))mstore(0x1b80, mulmod(mload(0x1b60), mload(0x1b60), f_q))mstore(0x1ba0, mulmod(mload(0x1b80), mload(0x1b80), f_q))mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x1ba0), f_q))mstore(0x1be0, mulmod(mload(0x1bc0), mload(0x1bc0), f_q))mstore(0x1c00, mulmod(mload(0x1be0), mload(0x1be0), f_q))mstore(0x1c20, mulmod(mload(0x1c00), mload(0x1c00), f_q))mstore(0x1c40, mulmod(mload(0x1c20), mload(0x1c20), f_q))mstore(0x1c60, mulmod(mload(0x1c40), mload(0x1c40), f_q))mstore(0x1c80, mulmod(mload(0x1c60), mload(0x1c60), f_q))mstore(0x1ca0, mulmod(mload(0x1c80), mload(0x1c80), f_q))mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x1ca0), f_q))mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x1cc0), f_q))mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x1ce0), f_q))mstore(0x1d20, addmod(mload(0x1d00), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1d40, mulmod(mload(0x1d20), 21887574895677414892802367463831943750807625009412603678587617693528122466305, f_q))mstore(0x1d60, mulmod(mload(0x1d40), 16352530144570232727633744131804667993120004373047725463318648550785966993151, f_q))mstore(0x1d80, addmod(mload(0x1340), 5535712727269042494612661613452607095428360027368308880379555635789841502466, f_q))mstore(0x1da0, mulmod(mload(0x1d40), 14553179485550867228528728261227346284647560894473765120196362074270314914987, f_q))mstore(0x1dc0, addmod(mload(0x1340), 7335063386288407993717677484029928803900803505942269223501842112305493580630, f_q))mstore(0x1de0, mulmod(mload(0x1d40), 4521750382223097318870644937630448302689540805369738458837210702774549763045, f_q))mstore(0x1e00, addmod(mload(0x1340), 17366492489616177903375760807626826785858823595046295884860993483801258732572, f_q))mstore(0x1e20, mulmod(mload(0x1d40), 10763352634187770026454006562738618997775638622944072507352459644433398105234, f_q))mstore(0x1e40, addmod(mload(0x1340), 11124890237651505195792399182518656090772725777471961836345744542142410390383, f_q))mstore(0x1e60, mulmod(mload(0x1d40), 21534532313823515215512181691915269261875716777293450290797415136928563006845, f_q))mstore(0x1e80, addmod(mload(0x1340), 353710558015760006734224053342005826672647623122584052900789049647245488772, f_q))mstore(0x1ea0, mulmod(mload(0x1d40), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q))mstore(0x1ec0, addmod(mload(0x1340), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q))mstore(0x1ee0, mulmod(mload(0x1d40), 1, f_q))mstore(0x1f00, addmod(mload(0x1340), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1f20, mulmod(mload(0x1d40), 19671853614403325433334785013442879012032153960035114761748042217991436932142, f_q))mstore(0x1f40, addmod(mload(0x1340), 2216389257435949788911620731814396076516210440380919581950161968584371563475, f_q)){            let prod := mload(0x1d80)                prod := mulmod(mload(0x1dc0), prod, f_q)                mstore(0x1f60, prod)                            prod := mulmod(mload(0x1e00), prod, f_q)                mstore(0x1f80, prod)                            prod := mulmod(mload(0x1e40), prod, f_q)                mstore(0x1fa0, prod)                            prod := mulmod(mload(0x1e80), prod, f_q)                mstore(0x1fc0, prod)                            prod := mulmod(mload(0x1ec0), prod, f_q)                mstore(0x1fe0, prod)                            prod := mulmod(mload(0x1f00), prod, f_q)                mstore(0x2000, prod)                            prod := mulmod(mload(0x1f40), prod, f_q)                mstore(0x2020, prod)                            prod := mulmod(mload(0x1d20), prod, f_q)                mstore(0x2040, prod)                    }mstore(0x2080, 32)mstore(0x20a0, 32)mstore(0x20c0, 32)mstore(0x20e0, mload(0x2040))mstore(0x2100, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x2120, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x2080, 0xc0, 0x2060, 0x20), 1), success){                        let inv := mload(0x2060)            let v                            v := mload(0x1d20)                    mstore(0x1d20, mulmod(mload(0x2020), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1f40)                    mstore(0x1f40, mulmod(mload(0x2000), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1f00)                    mstore(0x1f00, mulmod(mload(0x1fe0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ec0)                    mstore(0x1ec0, mulmod(mload(0x1fc0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1e80)                    mstore(0x1e80, mulmod(mload(0x1fa0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1e40)                    mstore(0x1e40, mulmod(mload(0x1f80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1e00)                    mstore(0x1e00, mulmod(mload(0x1f60), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1dc0)                    mstore(0x1dc0, mulmod(mload(0x1d80), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x1d80, inv)        }mstore(0x2140, mulmod(mload(0x1d60), mload(0x1d80), f_q))mstore(0x2160, mulmod(mload(0x1da0), mload(0x1dc0), f_q))mstore(0x2180, mulmod(mload(0x1de0), mload(0x1e00), f_q))mstore(0x21a0, mulmod(mload(0x1e20), mload(0x1e40), f_q))mstore(0x21c0, mulmod(mload(0x1e60), mload(0x1e80), f_q))mstore(0x21e0, mulmod(mload(0x1ea0), mload(0x1ec0), f_q))mstore(0x2200, mulmod(mload(0x1ee0), mload(0x1f00), f_q))mstore(0x2220, mulmod(mload(0x1f20), mload(0x1f40), f_q)){            let result := mulmod(mload(0x2200), mload(0xcc0), f_q)mstore(0x2240, result)        }{            let result := mulmod(mload(0x2200), mload(0xce0), f_q)result := addmod(mulmod(mload(0x2220), mload(0xd00), f_q), result, f_q)mstore(0x2260, result)        }mstore(0x2280, addmod(1, sub(f_q, mload(0x15e0)), f_q))mstore(0x22a0, mulmod(mload(0x2280), mload(0x15e0), f_q))mstore(0x22c0, addmod(2, sub(f_q, mload(0x15e0)), f_q))mstore(0x22e0, mulmod(mload(0x22c0), mload(0x22a0), f_q))mstore(0x2300, addmod(4, sub(f_q, mload(0x15e0)), f_q))mstore(0x2320, mulmod(mload(0x2300), mload(0x22e0), f_q))mstore(0x2340, mulmod(mload(0x13a0), mload(0x1380), f_q))mstore(0x2360, addmod(mload(0x2340), mload(0x13e0), f_q))mstore(0x2380, addmod(mload(0x13c0), sub(f_q, mload(0x2360)), f_q))mstore(0x23a0, mulmod(mload(0x2380), mload(0x2320), f_q))mstore(0x23c0, mulmod(mload(0x11a0), mload(0x23a0), f_q))mstore(0x23e0, addmod(2, sub(f_q, mload(0x1620)), f_q))mstore(0x2400, mulmod(mload(0x23e0), mload(0x1620), f_q))mstore(0x2420, addmod(3, sub(f_q, mload(0x1620)), f_q))mstore(0x2440, mulmod(mload(0x2420), mload(0x2400), f_q))mstore(0x2460, addmod(mload(0x13c0), sub(f_q, mload(0x13a0)), f_q))mstore(0x2480, mulmod(mload(0x2460), mload(0x2440), f_q))mstore(0x24a0, addmod(mload(0x23c0), mload(0x2480), f_q))mstore(0x24c0, mulmod(mload(0x11a0), mload(0x24a0), f_q))mstore(0x24e0, mulmod(mload(0x22c0), mload(0x15e0), f_q))mstore(0x2500, addmod(3, sub(f_q, mload(0x15e0)), f_q))mstore(0x2520, mulmod(mload(0x2500), mload(0x24e0), f_q))mstore(0x2540, mulmod(mload(0x2300), mload(0x2520), f_q))mstore(0x2560, addmod(mload(0x1380), mload(0x13a0), f_q))mstore(0x2580, addmod(mload(0x13c0), sub(f_q, mload(0x2560)), f_q))mstore(0x25a0, mulmod(mload(0x2580), mload(0x2540), f_q))mstore(0x25c0, addmod(mload(0x24c0), mload(0x25a0), f_q))mstore(0x25e0, mulmod(mload(0x11a0), mload(0x25c0), f_q))mstore(0x2600, addmod(1, sub(f_q, mload(0x1600)), f_q))mstore(0x2620, mulmod(mload(0x2600), mload(0x1600), f_q))mstore(0x2640, addmod(3, sub(f_q, mload(0x1600)), f_q))mstore(0x2660, mulmod(mload(0x2640), mload(0x2620), f_q))mstore(0x2680, addmod(4, sub(f_q, mload(0x1600)), f_q))mstore(0x26a0, mulmod(mload(0x2680), mload(0x2660), f_q))mstore(0x26c0, addmod(mload(0x13c0), sub(f_q, mload(0x2340)), f_q))mstore(0x26e0, mulmod(mload(0x26c0), mload(0x26a0), f_q))mstore(0x2700, addmod(mload(0x25e0), mload(0x26e0), f_q))mstore(0x2720, mulmod(mload(0x11a0), mload(0x2700), f_q))mstore(0x2740, mulmod(mload(0x2500), mload(0x22a0), f_q))mstore(0x2760, mulmod(mload(0x2300), mload(0x2740), f_q))mstore(0x2780, addmod(mload(0x1380), sub(f_q, mload(0x13a0)), f_q))mstore(0x27a0, addmod(mload(0x13c0), sub(f_q, mload(0x2780)), f_q))mstore(0x27c0, mulmod(mload(0x27a0), mload(0x2760), f_q))mstore(0x27e0, addmod(mload(0x2720), mload(0x27c0), f_q))mstore(0x2800, mulmod(mload(0x11a0), mload(0x27e0), f_q))mstore(0x2820, mulmod(mload(0x2500), mload(0x22e0), f_q))mstore(0x2840, addmod(mload(0x13a0), mload(0x13e0), f_q))mstore(0x2860, addmod(mload(0x13c0), sub(f_q, mload(0x2840)), f_q))mstore(0x2880, mulmod(mload(0x2860), mload(0x2820), f_q))mstore(0x28a0, addmod(mload(0x2800), mload(0x2880), f_q))mstore(0x28c0, mulmod(mload(0x11a0), mload(0x28a0), f_q))mstore(0x28e0, addmod(2, sub(f_q, mload(0x1600)), f_q))mstore(0x2900, mulmod(mload(0x28e0), mload(0x1600), f_q))mstore(0x2920, mulmod(mload(0x2640), mload(0x2900), f_q))mstore(0x2940, mulmod(mload(0x2680), mload(0x2920), f_q))mstore(0x2960, addmod(mload(0x13c0), sub(f_q, sub(f_q, mload(0x13a0))), f_q))mstore(0x2980, mulmod(mload(0x2960), mload(0x2940), f_q))mstore(0x29a0, addmod(mload(0x28c0), mload(0x2980), f_q))mstore(0x29c0, mulmod(mload(0x11a0), mload(0x29a0), f_q))mstore(0x29e0, mulmod(mload(0x28e0), mload(0x2620), f_q))mstore(0x2a00, mulmod(mload(0x2680), mload(0x29e0), f_q))mstore(0x2a20, addmod(mload(0x13a0), sub(f_q, mload(0x13c0)), f_q))mstore(0x2a40, mulmod(mload(0x2a20), mload(0x2a00), f_q))mstore(0x2a60, addmod(mload(0x29c0), mload(0x2a40), f_q))mstore(0x2a80, mulmod(mload(0x11a0), mload(0x2a60), f_q))mstore(0x2aa0, mulmod(mload(0x2640), mload(0x29e0), f_q))mstore(0x2ac0, mulmod(mload(0x13a0), mload(0x2aa0), f_q))mstore(0x2ae0, addmod(mload(0x2a80), mload(0x2ac0), f_q))mstore(0x2b00, mulmod(mload(0x11a0), mload(0x2ae0), f_q))mstore(0x2b20, addmod(1, sub(f_q, mload(0x1620)), f_q))mstore(0x2b40, mulmod(mload(0x2b20), mload(0x1620), f_q))mstore(0x2b60, mulmod(mload(0x2420), mload(0x2b40), f_q))mstore(0x2b80, addmod(mload(0x13a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x2ba0, mulmod(mload(0x2b80), mload(0x13a0), f_q))mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x2b60), f_q))mstore(0x2be0, addmod(mload(0x2b00), mload(0x2bc0), f_q))mstore(0x2c00, mulmod(mload(0x11a0), mload(0x2be0), f_q))mstore(0x2c20, addmod(mload(0x1400), mload(0x1580), f_q))mstore(0x2c40, mulmod(mload(0x2c20), mload(0x2c20), f_q))mstore(0x2c60, mulmod(mload(0x2c40), mload(0x2c40), f_q))mstore(0x2c80, mulmod(mload(0x2c20), mload(0x2c60), f_q))mstore(0x2ca0, mulmod(mload(0x2c80), 2910766817845651019878574839501801340070030115151021261302834310722729507541, f_q))mstore(0x2cc0, addmod(mload(0x1420), mload(0x15a0), f_q))mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0x2cc0), f_q))mstore(0x2d00, mulmod(mload(0x2ce0), mload(0x2ce0), f_q))mstore(0x2d20, mulmod(mload(0x2cc0), mload(0x2d00), f_q))mstore(0x2d40, mulmod(mload(0x2d20), 19727366863391167538122140361473584127147630672623100827934084310230022599144, f_q))mstore(0x2d60, addmod(mload(0x2ca0), mload(0x2d40), f_q))mstore(0x2d80, addmod(mload(0x2d60), sub(f_q, mload(0x1440)), f_q))mstore(0x2da0, mulmod(mload(0x2d80), mload(0x1640), f_q))mstore(0x2dc0, addmod(mload(0x2c00), mload(0x2da0), f_q))mstore(0x2de0, mulmod(mload(0x11a0), mload(0x2dc0), f_q))mstore(0x2e00, mulmod(mload(0x2c80), 5776684794125549462448597414050232243778680302179439492664047328281728356345, f_q))mstore(0x2e20, mulmod(mload(0x2d20), 8348174920934122550483593999453880006756108121341067172388445916328941978568, f_q))mstore(0x2e40, addmod(mload(0x2e00), mload(0x2e20), f_q))mstore(0x2e60, addmod(mload(0x2e40), sub(f_q, mload(0x1460)), f_q))mstore(0x2e80, mulmod(mload(0x2e60), mload(0x1640), f_q))mstore(0x2ea0, addmod(mload(0x2de0), mload(0x2e80), f_q))mstore(0x2ec0, mulmod(mload(0x11a0), mload(0x2ea0), f_q))mstore(0x2ee0, addmod(mload(0x2c80), sub(f_q, mload(0x1480)), f_q))mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x1660), f_q))mstore(0x2f20, addmod(mload(0x2ec0), mload(0x2f00), f_q))mstore(0x2f40, mulmod(mload(0x11a0), mload(0x2f20), f_q))mstore(0x2f60, mulmod(mload(0x1480), 2910766817845651019878574839501801340070030115151021261302834310722729507541, f_q))mstore(0x2f80, mulmod(mload(0x2cc0), 19727366863391167538122140361473584127147630672623100827934084310230022599144, f_q))mstore(0x2fa0, addmod(mload(0x2f60), mload(0x2f80), f_q))mstore(0x2fc0, addmod(mload(0x2fa0), mload(0x1540), f_q))mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0x2fc0), f_q))mstore(0x3000, mulmod(mload(0x2fe0), mload(0x2fe0), f_q))mstore(0x3020, mulmod(mload(0x2fc0), mload(0x3000), f_q))mstore(0x3040, mulmod(mload(0x1440), 8897705321156975119607866206188469715432233408805434913352778521345836531302, f_q))mstore(0x3060, mulmod(mload(0x1460), 13897810991298242824030978581179475767377101082166056046492926701399149797630, f_q))mstore(0x3080, addmod(mload(0x3040), mload(0x3060), f_q))mstore(0x30a0, addmod(mload(0x3020), sub(f_q, mload(0x3080)), f_q))mstore(0x30c0, mulmod(mload(0x30a0), mload(0x1660), f_q))mstore(0x30e0, addmod(mload(0x2f40), mload(0x30c0), f_q))mstore(0x3100, mulmod(mload(0x11a0), mload(0x30e0), f_q))mstore(0x3120, mulmod(mload(0x1480), 5776684794125549462448597414050232243778680302179439492664047328281728356345, f_q))mstore(0x3140, mulmod(mload(0x2cc0), 8348174920934122550483593999453880006756108121341067172388445916328941978568, f_q))mstore(0x3160, addmod(mload(0x3120), mload(0x3140), f_q))mstore(0x3180, addmod(mload(0x3160), mload(0x1560), f_q))mstore(0x31a0, mulmod(mload(0x1440), 7127083008168878795310303301757642617203533252990949589494537404444738046722, f_q))mstore(0x31c0, mulmod(mload(0x1460), 10251091711782631878897995303436082826711938358699127319815611151510940403902, f_q))mstore(0x31e0, addmod(mload(0x31a0), mload(0x31c0), f_q))mstore(0x3200, addmod(mload(0x3180), sub(f_q, mload(0x31e0)), f_q))mstore(0x3220, mulmod(mload(0x3200), mload(0x1660), f_q))mstore(0x3240, addmod(mload(0x3100), mload(0x3220), f_q))mstore(0x3260, mulmod(mload(0x11a0), mload(0x3240), f_q))mstore(0x3280, mulmod(mload(0x23e0), mload(0x2b40), f_q))mstore(0x32a0, addmod(mload(0x14c0), mload(0x1400), f_q))mstore(0x32c0, addmod(mload(0x32a0), sub(f_q, mload(0x1440)), f_q))mstore(0x32e0, mulmod(mload(0x32c0), mload(0x3280), f_q))mstore(0x3300, addmod(mload(0x3260), mload(0x32e0), f_q))mstore(0x3320, mulmod(mload(0x11a0), mload(0x3300), f_q))mstore(0x3340, addmod(mload(0x14a0), sub(f_q, mload(0x1460)), f_q))mstore(0x3360, mulmod(mload(0x3340), mload(0x3280), f_q))mstore(0x3380, addmod(mload(0x3320), mload(0x3360), f_q))mstore(0x33a0, mulmod(mload(0x11a0), mload(0x3380), f_q))mstore(0x33c0, addmod(1, sub(f_q, mload(0x17e0)), f_q))mstore(0x33e0, mulmod(mload(0x33c0), mload(0x2200), f_q))mstore(0x3400, addmod(mload(0x33a0), mload(0x33e0), f_q))mstore(0x3420, mulmod(mload(0x11a0), mload(0x3400), f_q))mstore(0x3440, mulmod(mload(0x18a0), mload(0x18a0), f_q))mstore(0x3460, addmod(mload(0x3440), sub(f_q, mload(0x18a0)), f_q))mstore(0x3480, mulmod(mload(0x3460), mload(0x2140), f_q))mstore(0x34a0, addmod(mload(0x3420), mload(0x3480), f_q))mstore(0x34c0, mulmod(mload(0x11a0), mload(0x34a0), f_q))mstore(0x34e0, addmod(mload(0x1840), sub(f_q, mload(0x1820)), f_q))mstore(0x3500, mulmod(mload(0x34e0), mload(0x2200), f_q))mstore(0x3520, addmod(mload(0x34c0), mload(0x3500), f_q))mstore(0x3540, mulmod(mload(0x11a0), mload(0x3520), f_q))mstore(0x3560, addmod(mload(0x18a0), sub(f_q, mload(0x1880)), f_q))mstore(0x3580, mulmod(mload(0x3560), mload(0x2200), f_q))mstore(0x35a0, addmod(mload(0x3540), mload(0x3580), f_q))mstore(0x35c0, mulmod(mload(0x11a0), mload(0x35a0), f_q))mstore(0x35e0, addmod(1, sub(f_q, mload(0x2140)), f_q))mstore(0x3600, addmod(mload(0x2160), mload(0x2180), f_q))mstore(0x3620, addmod(mload(0x3600), mload(0x21a0), f_q))mstore(0x3640, addmod(mload(0x3620), mload(0x21c0), f_q))mstore(0x3660, addmod(mload(0x3640), mload(0x21e0), f_q))mstore(0x3680, addmod(mload(0x35e0), sub(f_q, mload(0x3660)), f_q))mstore(0x36a0, mulmod(mload(0x16a0), mload(0xfa0), f_q))mstore(0x36c0, addmod(mload(0x1380), mload(0x36a0), f_q))mstore(0x36e0, addmod(mload(0x36c0), mload(0x1000), f_q))mstore(0x3700, mulmod(mload(0x16c0), mload(0xfa0), f_q))mstore(0x3720, addmod(mload(0x13a0), mload(0x3700), f_q))mstore(0x3740, addmod(mload(0x3720), mload(0x1000), f_q))mstore(0x3760, mulmod(mload(0x3740), mload(0x36e0), f_q))mstore(0x3780, mulmod(mload(0x16e0), mload(0xfa0), f_q))mstore(0x37a0, addmod(mload(0x13c0), mload(0x3780), f_q))mstore(0x37c0, addmod(mload(0x37a0), mload(0x1000), f_q))mstore(0x37e0, mulmod(mload(0x37c0), mload(0x3760), f_q))mstore(0x3800, mulmod(mload(0x1700), mload(0xfa0), f_q))mstore(0x3820, addmod(mload(0x2240), mload(0x3800), f_q))mstore(0x3840, addmod(mload(0x3820), mload(0x1000), f_q))mstore(0x3860, mulmod(mload(0x3840), mload(0x37e0), f_q))mstore(0x3880, mulmod(mload(0x3860), mload(0x1800), f_q))mstore(0x38a0, mulmod(1, mload(0xfa0), f_q))mstore(0x38c0, mulmod(mload(0x1340), mload(0x38a0), f_q))mstore(0x38e0, addmod(mload(0x1380), mload(0x38c0), f_q))mstore(0x3900, addmod(mload(0x38e0), mload(0x1000), f_q))mstore(0x3920, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0xfa0), f_q))mstore(0x3940, mulmod(mload(0x1340), mload(0x3920), f_q))mstore(0x3960, addmod(mload(0x13a0), mload(0x3940), f_q))mstore(0x3980, addmod(mload(0x3960), mload(0x1000), f_q))mstore(0x39a0, mulmod(mload(0x3980), mload(0x3900), f_q))mstore(0x39c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0xfa0), f_q))mstore(0x39e0, mulmod(mload(0x1340), mload(0x39c0), f_q))mstore(0x3a00, addmod(mload(0x13c0), mload(0x39e0), f_q))mstore(0x3a20, addmod(mload(0x3a00), mload(0x1000), f_q))mstore(0x3a40, mulmod(mload(0x3a20), mload(0x39a0), f_q))mstore(0x3a60, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0xfa0), f_q))mstore(0x3a80, mulmod(mload(0x1340), mload(0x3a60), f_q))mstore(0x3aa0, addmod(mload(0x2240), mload(0x3a80), f_q))mstore(0x3ac0, addmod(mload(0x3aa0), mload(0x1000), f_q))mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0x3a40), f_q))mstore(0x3b00, mulmod(mload(0x3ae0), mload(0x17e0), f_q))mstore(0x3b20, addmod(mload(0x3880), sub(f_q, mload(0x3b00)), f_q))mstore(0x3b40, mulmod(mload(0x3b20), mload(0x3680), f_q))mstore(0x3b60, addmod(mload(0x35c0), mload(0x3b40), f_q))mstore(0x3b80, mulmod(mload(0x11a0), mload(0x3b60), f_q))mstore(0x3ba0, mulmod(mload(0x1720), mload(0xfa0), f_q))mstore(0x3bc0, addmod(mload(0x14e0), mload(0x3ba0), f_q))mstore(0x3be0, addmod(mload(0x3bc0), mload(0x1000), f_q))mstore(0x3c00, mulmod(mload(0x1740), mload(0xfa0), f_q))mstore(0x3c20, addmod(mload(0x1400), mload(0x3c00), f_q))mstore(0x3c40, addmod(mload(0x3c20), mload(0x1000), f_q))mstore(0x3c60, mulmod(mload(0x3c40), mload(0x3be0), f_q))mstore(0x3c80, mulmod(mload(0x1760), mload(0xfa0), f_q))mstore(0x3ca0, addmod(mload(0x1420), mload(0x3c80), f_q))mstore(0x3cc0, addmod(mload(0x3ca0), mload(0x1000), f_q))mstore(0x3ce0, mulmod(mload(0x3cc0), mload(0x3c60), f_q))mstore(0x3d00, mulmod(mload(0x1780), mload(0xfa0), f_q))mstore(0x3d20, addmod(mload(0x1540), mload(0x3d00), f_q))mstore(0x3d40, addmod(mload(0x3d20), mload(0x1000), f_q))mstore(0x3d60, mulmod(mload(0x3d40), mload(0x3ce0), f_q))mstore(0x3d80, mulmod(mload(0x3d60), mload(0x1860), f_q))mstore(0x3da0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0xfa0), f_q))mstore(0x3dc0, mulmod(mload(0x1340), mload(0x3da0), f_q))mstore(0x3de0, addmod(mload(0x14e0), mload(0x3dc0), f_q))mstore(0x3e00, addmod(mload(0x3de0), mload(0x1000), f_q))mstore(0x3e20, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0xfa0), f_q))mstore(0x3e40, mulmod(mload(0x1340), mload(0x3e20), f_q))mstore(0x3e60, addmod(mload(0x1400), mload(0x3e40), f_q))mstore(0x3e80, addmod(mload(0x3e60), mload(0x1000), f_q))mstore(0x3ea0, mulmod(mload(0x3e80), mload(0x3e00), f_q))mstore(0x3ec0, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0xfa0), f_q))mstore(0x3ee0, mulmod(mload(0x1340), mload(0x3ec0), f_q))mstore(0x3f00, addmod(mload(0x1420), mload(0x3ee0), f_q))mstore(0x3f20, addmod(mload(0x3f00), mload(0x1000), f_q))mstore(0x3f40, mulmod(mload(0x3f20), mload(0x3ea0), f_q))mstore(0x3f60, mulmod(14704729814417906439424896605881467874595262020190401576785074330126828718155, mload(0xfa0), f_q))mstore(0x3f80, mulmod(mload(0x1340), mload(0x3f60), f_q))mstore(0x3fa0, addmod(mload(0x1540), mload(0x3f80), f_q))mstore(0x3fc0, addmod(mload(0x3fa0), mload(0x1000), f_q))mstore(0x3fe0, mulmod(mload(0x3fc0), mload(0x3f40), f_q))mstore(0x4000, mulmod(mload(0x3fe0), mload(0x1840), f_q))mstore(0x4020, addmod(mload(0x3d80), sub(f_q, mload(0x4000)), f_q))mstore(0x4040, mulmod(mload(0x4020), mload(0x3680), f_q))mstore(0x4060, addmod(mload(0x3b80), mload(0x4040), f_q))mstore(0x4080, mulmod(mload(0x11a0), mload(0x4060), f_q))mstore(0x40a0, mulmod(mload(0x17a0), mload(0xfa0), f_q))mstore(0x40c0, addmod(mload(0x1560), mload(0x40a0), f_q))mstore(0x40e0, addmod(mload(0x40c0), mload(0x1000), f_q))mstore(0x4100, mulmod(mload(0x17c0), mload(0xfa0), f_q))mstore(0x4120, addmod(mload(0x2260), mload(0x4100), f_q))mstore(0x4140, addmod(mload(0x4120), mload(0x1000), f_q))mstore(0x4160, mulmod(mload(0x4140), mload(0x40e0), f_q))mstore(0x4180, mulmod(mload(0x4160), mload(0x18c0), f_q))mstore(0x41a0, mulmod(8343274462013750416000956870576256937330525306073862550863787263304548803879, mload(0xfa0), f_q))mstore(0x41c0, mulmod(mload(0x1340), mload(0x41a0), f_q))mstore(0x41e0, addmod(mload(0x1560), mload(0x41c0), f_q))mstore(0x4200, addmod(mload(0x41e0), mload(0x1000), f_q))mstore(0x4220, mulmod(20928372310071051017340352686640453451620397549739756658327314209761852842004, mload(0xfa0), f_q))mstore(0x4240, mulmod(mload(0x1340), mload(0x4220), f_q))mstore(0x4260, addmod(mload(0x2260), mload(0x4240), f_q))mstore(0x4280, addmod(mload(0x4260), mload(0x1000), f_q))mstore(0x42a0, mulmod(mload(0x4280), mload(0x4200), f_q))mstore(0x42c0, mulmod(mload(0x42a0), mload(0x18a0), f_q))mstore(0x42e0, addmod(mload(0x4180), sub(f_q, mload(0x42c0)), f_q))mstore(0x4300, mulmod(mload(0x42e0), mload(0x3680), f_q))mstore(0x4320, addmod(mload(0x4080), mload(0x4300), f_q))mstore(0x4340, mulmod(mload(0x11a0), mload(0x4320), f_q))mstore(0x4360, addmod(1, sub(f_q, mload(0x18e0)), f_q))mstore(0x4380, mulmod(mload(0x4360), mload(0x2200), f_q))mstore(0x43a0, addmod(mload(0x4340), mload(0x4380), f_q))mstore(0x43c0, mulmod(mload(0x11a0), mload(0x43a0), f_q))mstore(0x43e0, mulmod(mload(0x18e0), mload(0x18e0), f_q))mstore(0x4400, addmod(mload(0x43e0), sub(f_q, mload(0x18e0)), f_q))mstore(0x4420, mulmod(mload(0x4400), mload(0x2140), f_q))mstore(0x4440, addmod(mload(0x43c0), mload(0x4420), f_q))mstore(0x4460, mulmod(mload(0x11a0), mload(0x4440), f_q))mstore(0x4480, addmod(mload(0x1920), mload(0xfa0), f_q))mstore(0x44a0, mulmod(mload(0x4480), mload(0x1900), f_q))mstore(0x44c0, addmod(mload(0x1960), mload(0x1000), f_q))mstore(0x44e0, mulmod(mload(0x44c0), mload(0x44a0), f_q))mstore(0x4500, mulmod(mload(0x1380), mload(0x15c0), f_q))mstore(0x4520, addmod(1, sub(f_q, mload(0x15c0)), f_q))mstore(0x4540, mulmod(mload(0x4520), 0, f_q))mstore(0x4560, addmod(mload(0x4500), mload(0x4540), f_q))mstore(0x4580, mulmod(mload(0xec0), mload(0x4560), f_q))mstore(0x45a0, mulmod(mload(0x13a0), mload(0x15c0), f_q))mstore(0x45c0, addmod(mload(0x45a0), mload(0x4540), f_q))mstore(0x45e0, addmod(mload(0x4580), mload(0x45c0), f_q))mstore(0x4600, addmod(mload(0x45e0), mload(0xfa0), f_q))mstore(0x4620, mulmod(mload(0x4600), mload(0x18e0), f_q))mstore(0x4640, mulmod(mload(0xec0), mload(0x1500), f_q))mstore(0x4660, addmod(mload(0x4640), mload(0x1520), f_q))mstore(0x4680, addmod(mload(0x4660), mload(0x1000), f_q))mstore(0x46a0, mulmod(mload(0x4680), mload(0x4620), f_q))mstore(0x46c0, addmod(mload(0x44e0), sub(f_q, mload(0x46a0)), f_q))mstore(0x46e0, mulmod(mload(0x46c0), mload(0x3680), f_q))mstore(0x4700, addmod(mload(0x4460), mload(0x46e0), f_q))mstore(0x4720, mulmod(mload(0x11a0), mload(0x4700), f_q))mstore(0x4740, addmod(mload(0x1920), sub(f_q, mload(0x1960)), f_q))mstore(0x4760, mulmod(mload(0x4740), mload(0x2200), f_q))mstore(0x4780, addmod(mload(0x4720), mload(0x4760), f_q))mstore(0x47a0, mulmod(mload(0x11a0), mload(0x4780), f_q))mstore(0x47c0, mulmod(mload(0x4740), mload(0x3680), f_q))mstore(0x47e0, addmod(mload(0x1920), sub(f_q, mload(0x1940)), f_q))mstore(0x4800, mulmod(mload(0x47e0), mload(0x47c0), f_q))mstore(0x4820, addmod(mload(0x47a0), mload(0x4800), f_q))mstore(0x4840, mulmod(mload(0x1d00), mload(0x1d00), f_q))mstore(0x4860, mulmod(mload(0x4840), mload(0x1d00), f_q))mstore(0x4880, mulmod(mload(0x4860), mload(0x1d00), f_q))mstore(0x48a0, mulmod(mload(0x4880), mload(0x1d00), f_q))mstore(0x48c0, mulmod(1, mload(0x1d00), f_q))mstore(0x48e0, mulmod(1, mload(0x4840), f_q))mstore(0x4900, mulmod(1, mload(0x4860), f_q))mstore(0x4920, mulmod(1, mload(0x4880), f_q))mstore(0x4940, mulmod(mload(0x4820), mload(0x1d20), f_q))mstore(0x4960, mulmod(mload(0x1b00), mload(0x1b00), f_q))mstore(0x4980, mulmod(mload(0x4960), mload(0x1b00), f_q))mstore(0x49a0, mulmod(mload(0x4980), mload(0x1b00), f_q))mstore(0x49c0, mulmod(mload(0x19a0), mload(0x19a0), f_q))mstore(0x49e0, mulmod(mload(0x49c0), mload(0x19a0), f_q))mstore(0x4a00, mulmod(mload(0x49e0), mload(0x19a0), f_q))mstore(0x4a20, mulmod(mload(0x4a00), mload(0x19a0), f_q))mstore(0x4a40, mulmod(mload(0x4a20), mload(0x19a0), f_q))mstore(0x4a60, mulmod(mload(0x4a40), mload(0x19a0), f_q))mstore(0x4a80, mulmod(mload(0x4a60), mload(0x19a0), f_q))mstore(0x4aa0, mulmod(mload(0x4a80), mload(0x19a0), f_q))mstore(0x4ac0, mulmod(mload(0x4aa0), mload(0x19a0), f_q))mstore(0x4ae0, mulmod(mload(0x4ac0), mload(0x19a0), f_q))mstore(0x4b00, mulmod(mload(0x4ae0), mload(0x19a0), f_q))mstore(0x4b20, mulmod(mload(0x4b00), mload(0x19a0), f_q))mstore(0x4b40, mulmod(mload(0x4b20), mload(0x19a0), f_q))mstore(0x4b60, mulmod(mload(0x4b40), mload(0x19a0), f_q))mstore(0x4b80, mulmod(mload(0x4b60), mload(0x19a0), f_q))mstore(0x4ba0, mulmod(mload(0x4b80), mload(0x19a0), f_q))mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0x19a0), f_q))mstore(0x4be0, mulmod(mload(0x4bc0), mload(0x19a0), f_q))mstore(0x4c00, mulmod(mload(0x4be0), mload(0x19a0), f_q))mstore(0x4c20, mulmod(mload(0x4c00), mload(0x19a0), f_q))mstore(0x4c40, mulmod(mload(0x4c20), mload(0x19a0), f_q))mstore(0x4c60, mulmod(mload(0x4c40), mload(0x19a0), f_q))mstore(0x4c80, mulmod(mload(0x4c60), mload(0x19a0), f_q))mstore(0x4ca0, mulmod(mload(0x4c80), mload(0x19a0), f_q))mstore(0x4cc0, mulmod(mload(0x4ca0), mload(0x19a0), f_q))mstore(0x4ce0, mulmod(mload(0x4cc0), mload(0x19a0), f_q))mstore(0x4d00, mulmod(mload(0x4ce0), mload(0x19a0), f_q))mstore(0x4d20, mulmod(mload(0x4d00), mload(0x19a0), f_q))mstore(0x4d40, mulmod(mload(0x4d20), mload(0x19a0), f_q))mstore(0x4d60, mulmod(mload(0x4d40), mload(0x19a0), f_q))mstore(0x4d80, mulmod(mload(0x4d60), mload(0x19a0), f_q))mstore(0x4da0, mulmod(mload(0x4d80), mload(0x19a0), f_q))mstore(0x4dc0, mulmod(mload(0x4da0), mload(0x19a0), f_q))mstore(0x4de0, mulmod(mload(0x4dc0), mload(0x19a0), f_q))mstore(0x4e00, mulmod(mload(0x4de0), mload(0x19a0), f_q))mstore(0x4e20, mulmod(mload(0x4e00), mload(0x19a0), f_q))mstore(0x4e40, mulmod(sub(f_q, mload(0x1380)), 1, f_q))mstore(0x4e60, mulmod(sub(f_q, mload(0x13a0)), mload(0x19a0), f_q))mstore(0x4e80, mulmod(1, mload(0x19a0), f_q))mstore(0x4ea0, addmod(mload(0x4e40), mload(0x4e60), f_q))mstore(0x4ec0, mulmod(sub(f_q, mload(0x13c0)), mload(0x49c0), f_q))mstore(0x4ee0, mulmod(1, mload(0x49c0), f_q))mstore(0x4f00, addmod(mload(0x4ea0), mload(0x4ec0), f_q))mstore(0x4f20, mulmod(sub(f_q, mload(0x1400)), mload(0x49e0), f_q))mstore(0x4f40, mulmod(1, mload(0x49e0), f_q))mstore(0x4f60, addmod(mload(0x4f00), mload(0x4f20), f_q))mstore(0x4f80, mulmod(sub(f_q, mload(0x1420)), mload(0x4a00), f_q))mstore(0x4fa0, mulmod(1, mload(0x4a00), f_q))mstore(0x4fc0, addmod(mload(0x4f60), mload(0x4f80), f_q))mstore(0x4fe0, mulmod(sub(f_q, mload(0x1480)), mload(0x4a20), f_q))mstore(0x5000, mulmod(1, mload(0x4a20), f_q))mstore(0x5020, addmod(mload(0x4fc0), mload(0x4fe0), f_q))mstore(0x5040, mulmod(sub(f_q, mload(0x17e0)), mload(0x4a40), f_q))mstore(0x5060, mulmod(1, mload(0x4a40), f_q))mstore(0x5080, addmod(mload(0x5020), mload(0x5040), f_q))mstore(0x50a0, mulmod(sub(f_q, mload(0x1840)), mload(0x4a60), f_q))mstore(0x50c0, mulmod(1, mload(0x4a60), f_q))mstore(0x50e0, addmod(mload(0x5080), mload(0x50a0), f_q))mstore(0x5100, mulmod(sub(f_q, mload(0x18a0)), mload(0x4a80), f_q))mstore(0x5120, mulmod(1, mload(0x4a80), f_q))mstore(0x5140, addmod(mload(0x50e0), mload(0x5100), f_q))mstore(0x5160, mulmod(sub(f_q, mload(0x18e0)), mload(0x4aa0), f_q))mstore(0x5180, mulmod(1, mload(0x4aa0), f_q))mstore(0x51a0, addmod(mload(0x5140), mload(0x5160), f_q))mstore(0x51c0, mulmod(sub(f_q, mload(0x1920)), mload(0x4ac0), f_q))mstore(0x51e0, mulmod(1, mload(0x4ac0), f_q))mstore(0x5200, addmod(mload(0x51a0), mload(0x51c0), f_q))mstore(0x5220, mulmod(sub(f_q, mload(0x1960)), mload(0x4ae0), f_q))mstore(0x5240, mulmod(1, mload(0x4ae0), f_q))mstore(0x5260, addmod(mload(0x5200), mload(0x5220), f_q))mstore(0x5280, mulmod(sub(f_q, mload(0x14e0)), mload(0x4b00), f_q))mstore(0x52a0, mulmod(1, mload(0x4b00), f_q))mstore(0x52c0, addmod(mload(0x5260), mload(0x5280), f_q))mstore(0x52e0, mulmod(sub(f_q, mload(0x1500)), mload(0x4b20), f_q))mstore(0x5300, mulmod(1, mload(0x4b20), f_q))mstore(0x5320, addmod(mload(0x52c0), mload(0x52e0), f_q))mstore(0x5340, mulmod(sub(f_q, mload(0x1520)), mload(0x4b40), f_q))mstore(0x5360, mulmod(1, mload(0x4b40), f_q))mstore(0x5380, addmod(mload(0x5320), mload(0x5340), f_q))mstore(0x53a0, mulmod(sub(f_q, mload(0x1540)), mload(0x4b60), f_q))mstore(0x53c0, mulmod(1, mload(0x4b60), f_q))mstore(0x53e0, addmod(mload(0x5380), mload(0x53a0), f_q))mstore(0x5400, mulmod(sub(f_q, mload(0x1560)), mload(0x4b80), f_q))mstore(0x5420, mulmod(1, mload(0x4b80), f_q))mstore(0x5440, addmod(mload(0x53e0), mload(0x5400), f_q))mstore(0x5460, mulmod(sub(f_q, mload(0x1580)), mload(0x4ba0), f_q))mstore(0x5480, mulmod(1, mload(0x4ba0), f_q))mstore(0x54a0, addmod(mload(0x5440), mload(0x5460), f_q))mstore(0x54c0, mulmod(sub(f_q, mload(0x15a0)), mload(0x4bc0), f_q))mstore(0x54e0, mulmod(1, mload(0x4bc0), f_q))mstore(0x5500, addmod(mload(0x54a0), mload(0x54c0), f_q))mstore(0x5520, mulmod(sub(f_q, mload(0x15c0)), mload(0x4be0), f_q))mstore(0x5540, mulmod(1, mload(0x4be0), f_q))mstore(0x5560, addmod(mload(0x5500), mload(0x5520), f_q))mstore(0x5580, mulmod(sub(f_q, mload(0x15e0)), mload(0x4c00), f_q))mstore(0x55a0, mulmod(1, mload(0x4c00), f_q))mstore(0x55c0, addmod(mload(0x5560), mload(0x5580), f_q))mstore(0x55e0, mulmod(sub(f_q, mload(0x1600)), mload(0x4c20), f_q))mstore(0x5600, mulmod(1, mload(0x4c20), f_q))mstore(0x5620, addmod(mload(0x55c0), mload(0x55e0), f_q))mstore(0x5640, mulmod(sub(f_q, mload(0x1620)), mload(0x4c40), f_q))mstore(0x5660, mulmod(1, mload(0x4c40), f_q))mstore(0x5680, addmod(mload(0x5620), mload(0x5640), f_q))mstore(0x56a0, mulmod(sub(f_q, mload(0x1640)), mload(0x4c60), f_q))mstore(0x56c0, mulmod(1, mload(0x4c60), f_q))mstore(0x56e0, addmod(mload(0x5680), mload(0x56a0), f_q))mstore(0x5700, mulmod(sub(f_q, mload(0x1660)), mload(0x4c80), f_q))mstore(0x5720, mulmod(1, mload(0x4c80), f_q))mstore(0x5740, addmod(mload(0x56e0), mload(0x5700), f_q))mstore(0x5760, mulmod(sub(f_q, mload(0x16a0)), mload(0x4ca0), f_q))mstore(0x5780, mulmod(1, mload(0x4ca0), f_q))mstore(0x57a0, addmod(mload(0x5740), mload(0x5760), f_q))mstore(0x57c0, mulmod(sub(f_q, mload(0x16c0)), mload(0x4cc0), f_q))mstore(0x57e0, mulmod(1, mload(0x4cc0), f_q))mstore(0x5800, addmod(mload(0x57a0), mload(0x57c0), f_q))mstore(0x5820, mulmod(sub(f_q, mload(0x16e0)), mload(0x4ce0), f_q))mstore(0x5840, mulmod(1, mload(0x4ce0), f_q))mstore(0x5860, addmod(mload(0x5800), mload(0x5820), f_q))mstore(0x5880, mulmod(sub(f_q, mload(0x1700)), mload(0x4d00), f_q))mstore(0x58a0, mulmod(1, mload(0x4d00), f_q))mstore(0x58c0, addmod(mload(0x5860), mload(0x5880), f_q))mstore(0x58e0, mulmod(sub(f_q, mload(0x1720)), mload(0x4d20), f_q))mstore(0x5900, mulmod(1, mload(0x4d20), f_q))mstore(0x5920, addmod(mload(0x58c0), mload(0x58e0), f_q))mstore(0x5940, mulmod(sub(f_q, mload(0x1740)), mload(0x4d40), f_q))mstore(0x5960, mulmod(1, mload(0x4d40), f_q))mstore(0x5980, addmod(mload(0x5920), mload(0x5940), f_q))mstore(0x59a0, mulmod(sub(f_q, mload(0x1760)), mload(0x4d60), f_q))mstore(0x59c0, mulmod(1, mload(0x4d60), f_q))mstore(0x59e0, addmod(mload(0x5980), mload(0x59a0), f_q))mstore(0x5a00, mulmod(sub(f_q, mload(0x1780)), mload(0x4d80), f_q))mstore(0x5a20, mulmod(1, mload(0x4d80), f_q))mstore(0x5a40, addmod(mload(0x59e0), mload(0x5a00), f_q))mstore(0x5a60, mulmod(sub(f_q, mload(0x17a0)), mload(0x4da0), f_q))mstore(0x5a80, mulmod(1, mload(0x4da0), f_q))mstore(0x5aa0, addmod(mload(0x5a40), mload(0x5a60), f_q))mstore(0x5ac0, mulmod(sub(f_q, mload(0x17c0)), mload(0x4dc0), f_q))mstore(0x5ae0, mulmod(1, mload(0x4dc0), f_q))mstore(0x5b00, addmod(mload(0x5aa0), mload(0x5ac0), f_q))mstore(0x5b20, mulmod(sub(f_q, mload(0x4940)), mload(0x4de0), f_q))mstore(0x5b40, mulmod(1, mload(0x4de0), f_q))mstore(0x5b60, mulmod(mload(0x48c0), mload(0x4de0), f_q))mstore(0x5b80, mulmod(mload(0x48e0), mload(0x4de0), f_q))mstore(0x5ba0, mulmod(mload(0x4900), mload(0x4de0), f_q))mstore(0x5bc0, mulmod(mload(0x4920), mload(0x4de0), f_q))mstore(0x5be0, addmod(mload(0x5b00), mload(0x5b20), f_q))mstore(0x5c00, mulmod(sub(f_q, mload(0x1680)), mload(0x4e00), f_q))mstore(0x5c20, mulmod(1, mload(0x4e00), f_q))mstore(0x5c40, addmod(mload(0x5be0), mload(0x5c00), f_q))mstore(0x5c60, mulmod(mload(0x5c40), 1, f_q))mstore(0x5c80, mulmod(mload(0x4e80), 1, f_q))mstore(0x5ca0, mulmod(mload(0x4ee0), 1, f_q))mstore(0x5cc0, mulmod(mload(0x4f40), 1, f_q))mstore(0x5ce0, mulmod(mload(0x4fa0), 1, f_q))mstore(0x5d00, mulmod(mload(0x5000), 1, f_q))mstore(0x5d20, mulmod(mload(0x5060), 1, f_q))mstore(0x5d40, mulmod(mload(0x50c0), 1, f_q))mstore(0x5d60, mulmod(mload(0x5120), 1, f_q))mstore(0x5d80, mulmod(mload(0x5180), 1, f_q))mstore(0x5da0, mulmod(mload(0x51e0), 1, f_q))mstore(0x5dc0, mulmod(mload(0x5240), 1, f_q))mstore(0x5de0, mulmod(mload(0x52a0), 1, f_q))mstore(0x5e00, mulmod(mload(0x5300), 1, f_q))mstore(0x5e20, mulmod(mload(0x5360), 1, f_q))mstore(0x5e40, mulmod(mload(0x53c0), 1, f_q))mstore(0x5e60, mulmod(mload(0x5420), 1, f_q))mstore(0x5e80, mulmod(mload(0x5480), 1, f_q))mstore(0x5ea0, mulmod(mload(0x54e0), 1, f_q))mstore(0x5ec0, mulmod(mload(0x5540), 1, f_q))mstore(0x5ee0, mulmod(mload(0x55a0), 1, f_q))mstore(0x5f00, mulmod(mload(0x5600), 1, f_q))mstore(0x5f20, mulmod(mload(0x5660), 1, f_q))mstore(0x5f40, mulmod(mload(0x56c0), 1, f_q))mstore(0x5f60, mulmod(mload(0x5720), 1, f_q))mstore(0x5f80, mulmod(mload(0x5780), 1, f_q))mstore(0x5fa0, mulmod(mload(0x57e0), 1, f_q))mstore(0x5fc0, mulmod(mload(0x5840), 1, f_q))mstore(0x5fe0, mulmod(mload(0x58a0), 1, f_q))mstore(0x6000, mulmod(mload(0x5900), 1, f_q))mstore(0x6020, mulmod(mload(0x5960), 1, f_q))mstore(0x6040, mulmod(mload(0x59c0), 1, f_q))mstore(0x6060, mulmod(mload(0x5a20), 1, f_q))mstore(0x6080, mulmod(mload(0x5a80), 1, f_q))mstore(0x60a0, mulmod(mload(0x5ae0), 1, f_q))mstore(0x60c0, mulmod(mload(0x5b40), 1, f_q))mstore(0x60e0, mulmod(mload(0x5b60), 1, f_q))mstore(0x6100, mulmod(mload(0x5b80), 1, f_q))mstore(0x6120, mulmod(mload(0x5ba0), 1, f_q))mstore(0x6140, mulmod(mload(0x5bc0), 1, f_q))mstore(0x6160, mulmod(mload(0x5c20), 1, f_q))mstore(0x6180, mulmod(sub(f_q, mload(0x13e0)), 1, f_q))mstore(0x61a0, mulmod(sub(f_q, mload(0x14a0)), mload(0x19a0), f_q))mstore(0x61c0, addmod(mload(0x6180), mload(0x61a0), f_q))mstore(0x61e0, mulmod(sub(f_q, mload(0x14c0)), mload(0x49c0), f_q))mstore(0x6200, addmod(mload(0x61c0), mload(0x61e0), f_q))mstore(0x6220, mulmod(sub(f_q, mload(0x1940)), mload(0x49e0), f_q))mstore(0x6240, addmod(mload(0x6200), mload(0x6220), f_q))mstore(0x6260, mulmod(mload(0x6240), mload(0x1b00), f_q))mstore(0x6280, mulmod(1, mload(0x1b00), f_q))mstore(0x62a0, mulmod(mload(0x4e80), mload(0x1b00), f_q))mstore(0x62c0, mulmod(mload(0x4ee0), mload(0x1b00), f_q))mstore(0x62e0, mulmod(mload(0x4f40), mload(0x1b00), f_q))mstore(0x6300, addmod(mload(0x5c60), mload(0x6260), f_q))mstore(0x6320, addmod(mload(0x5ca0), mload(0x6280), f_q))mstore(0x6340, addmod(mload(0x5ce0), mload(0x62a0), f_q))mstore(0x6360, addmod(mload(0x5cc0), mload(0x62c0), f_q))mstore(0x6380, addmod(mload(0x5da0), mload(0x62e0), f_q))mstore(0x63a0, mulmod(sub(f_q, mload(0x1440)), 1, f_q))mstore(0x63c0, mulmod(sub(f_q, mload(0x1460)), mload(0x19a0), f_q))mstore(0x63e0, addmod(mload(0x63a0), mload(0x63c0), f_q))mstore(0x6400, mulmod(sub(f_q, mload(0x1800)), mload(0x49c0), f_q))mstore(0x6420, addmod(mload(0x63e0), mload(0x6400), f_q))mstore(0x6440, mulmod(sub(f_q, mload(0x1860)), mload(0x49e0), f_q))mstore(0x6460, addmod(mload(0x6420), mload(0x6440), f_q))mstore(0x6480, mulmod(sub(f_q, mload(0x18c0)), mload(0x4a00), f_q))mstore(0x64a0, addmod(mload(0x6460), mload(0x6480), f_q))mstore(0x64c0, mulmod(sub(f_q, mload(0x1900)), mload(0x4a20), f_q))mstore(0x64e0, addmod(mload(0x64a0), mload(0x64c0), f_q))mstore(0x6500, mulmod(mload(0x64e0), mload(0x4960), f_q))mstore(0x6520, mulmod(1, mload(0x4960), f_q))mstore(0x6540, mulmod(mload(0x4e80), mload(0x4960), f_q))mstore(0x6560, mulmod(mload(0x4ee0), mload(0x4960), f_q))mstore(0x6580, mulmod(mload(0x4f40), mload(0x4960), f_q))mstore(0x65a0, mulmod(mload(0x4fa0), mload(0x4960), f_q))mstore(0x65c0, mulmod(mload(0x5000), mload(0x4960), f_q))mstore(0x65e0, addmod(mload(0x6300), mload(0x6500), f_q))mstore(0x6600, addmod(mload(0x6360), mload(0x6520), f_q))mstore(0x6620, addmod(mload(0x6340), mload(0x6540), f_q))mstore(0x6640, addmod(mload(0x5d20), mload(0x6560), f_q))mstore(0x6660, addmod(mload(0x5d40), mload(0x6580), f_q))mstore(0x6680, addmod(mload(0x5d60), mload(0x65a0), f_q))mstore(0x66a0, addmod(mload(0x5d80), mload(0x65c0), f_q))mstore(0x66c0, mulmod(sub(f_q, mload(0x1880)), 1, f_q))mstore(0x66e0, mulmod(sub(f_q, mload(0x1820)), mload(0x19a0), f_q))mstore(0x6700, addmod(mload(0x66c0), mload(0x66e0), f_q))mstore(0x6720, mulmod(mload(0x6700), mload(0x4980), f_q))mstore(0x6740, mulmod(1, mload(0x4980), f_q))mstore(0x6760, mulmod(mload(0x4e80), mload(0x4980), f_q))mstore(0x6780, addmod(mload(0x65e0), mload(0x6720), f_q))mstore(0x67a0, addmod(mload(0x6660), mload(0x6740), f_q))mstore(0x67c0, addmod(mload(0x6640), mload(0x6760), f_q))mstore(0x67e0, mulmod(1, mload(0x1340), f_q))mstore(0x6800, mulmod(1, mload(0x67e0), f_q))mstore(0x6820, mulmod(14204982954615820785730815556166377574172276341958019443243371773666809943588, mload(0x1340), f_q))mstore(0x6840, mulmod(mload(0x6280), mload(0x6820), f_q))mstore(0x6860, mulmod(19671853614403325433334785013442879012032153960035114761748042217991436932142, mload(0x1340), f_q))mstore(0x6880, mulmod(mload(0x6520), mload(0x6860), f_q))mstore(0x68a0, mulmod(16352530144570232727633744131804667993120004373047725463318648550785966993151, mload(0x1340), f_q))mstore(0x68c0, mulmod(mload(0x6740), mload(0x68a0), f_q))mstore(0x68e0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x6900, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x6920, mload(0x6780))success := and(eq(staticcall(gas(), 0x7, 0x68e0, 0x60, 0x68e0, 0x40), 1), success)mstore(0x6940, mload(0x68e0))                    mstore(0x6960, mload(0x6900))mstore(0x6980, mload(0xd20))                    mstore(0x69a0, mload(0xd40))success := and(eq(staticcall(gas(), 0x6, 0x6940, 0x80, 0x6940, 0x40), 1), success)mstore(0x69c0, mload(0xd60))                    mstore(0x69e0, mload(0xd80))mstore(0x6a00, mload(0x5c80))success := and(eq(staticcall(gas(), 0x7, 0x69c0, 0x60, 0x69c0, 0x40), 1), success)mstore(0x6a20, mload(0x6940))                    mstore(0x6a40, mload(0x6960))mstore(0x6a60, mload(0x69c0))                    mstore(0x6a80, mload(0x69e0))success := and(eq(staticcall(gas(), 0x6, 0x6a20, 0x80, 0x6a20, 0x40), 1), success)mstore(0x6aa0, mload(0xda0))                    mstore(0x6ac0, mload(0xdc0))mstore(0x6ae0, mload(0x6320))success := and(eq(staticcall(gas(), 0x7, 0x6aa0, 0x60, 0x6aa0, 0x40), 1), success)mstore(0x6b00, mload(0x6a20))                    mstore(0x6b20, mload(0x6a40))mstore(0x6b40, mload(0x6aa0))                    mstore(0x6b60, mload(0x6ac0))success := and(eq(staticcall(gas(), 0x6, 0x6b00, 0x80, 0x6b00, 0x40), 1), success)mstore(0x6b80, mload(0xde0))                    mstore(0x6ba0, mload(0xe00))mstore(0x6bc0, mload(0x6600))success := and(eq(staticcall(gas(), 0x7, 0x6b80, 0x60, 0x6b80, 0x40), 1), success)mstore(0x6be0, mload(0x6b00))                    mstore(0x6c00, mload(0x6b20))mstore(0x6c20, mload(0x6b80))                    mstore(0x6c40, mload(0x6ba0))success := and(eq(staticcall(gas(), 0x6, 0x6be0, 0x80, 0x6be0, 0x40), 1), success)mstore(0x6c60, mload(0xe20))                    mstore(0x6c80, mload(0xe40))mstore(0x6ca0, mload(0x6620))success := and(eq(staticcall(gas(), 0x7, 0x6c60, 0x60, 0x6c60, 0x40), 1), success)mstore(0x6cc0, mload(0x6be0))                    mstore(0x6ce0, mload(0x6c00))mstore(0x6d00, mload(0x6c60))                    mstore(0x6d20, mload(0x6c80))success := and(eq(staticcall(gas(), 0x6, 0x6cc0, 0x80, 0x6cc0, 0x40), 1), success)mstore(0x6d40, mload(0xe60))                    mstore(0x6d60, mload(0xe80))mstore(0x6d80, mload(0x5d00))success := and(eq(staticcall(gas(), 0x7, 0x6d40, 0x60, 0x6d40, 0x40), 1), success)mstore(0x6da0, mload(0x6cc0))                    mstore(0x6dc0, mload(0x6ce0))mstore(0x6de0, mload(0x6d40))                    mstore(0x6e00, mload(0x6d60))success := and(eq(staticcall(gas(), 0x6, 0x6da0, 0x80, 0x6da0, 0x40), 1), success)mstore(0x6e20, mload(0x1040))                    mstore(0x6e40, mload(0x1060))mstore(0x6e60, mload(0x67c0))success := and(eq(staticcall(gas(), 0x7, 0x6e20, 0x60, 0x6e20, 0x40), 1), success)mstore(0x6e80, mload(0x6da0))                    mstore(0x6ea0, mload(0x6dc0))mstore(0x6ec0, mload(0x6e20))                    mstore(0x6ee0, mload(0x6e40))success := and(eq(staticcall(gas(), 0x6, 0x6e80, 0x80, 0x6e80, 0x40), 1), success)mstore(0x6f00, mload(0x1080))                    mstore(0x6f20, mload(0x10a0))mstore(0x6f40, mload(0x67a0))success := and(eq(staticcall(gas(), 0x7, 0x6f00, 0x60, 0x6f00, 0x40), 1), success)mstore(0x6f60, mload(0x6e80))                    mstore(0x6f80, mload(0x6ea0))mstore(0x6fa0, mload(0x6f00))                    mstore(0x6fc0, mload(0x6f20))success := and(eq(staticcall(gas(), 0x6, 0x6f60, 0x80, 0x6f60, 0x40), 1), success)mstore(0x6fe0, mload(0x10c0))                    mstore(0x7000, mload(0x10e0))mstore(0x7020, mload(0x6680))success := and(eq(staticcall(gas(), 0x7, 0x6fe0, 0x60, 0x6fe0, 0x40), 1), success)mstore(0x7040, mload(0x6f60))                    mstore(0x7060, mload(0x6f80))mstore(0x7080, mload(0x6fe0))                    mstore(0x70a0, mload(0x7000))success := and(eq(staticcall(gas(), 0x6, 0x7040, 0x80, 0x7040, 0x40), 1), success)mstore(0x70c0, mload(0x1100))                    mstore(0x70e0, mload(0x1120))mstore(0x7100, mload(0x66a0))success := and(eq(staticcall(gas(), 0x7, 0x70c0, 0x60, 0x70c0, 0x40), 1), success)mstore(0x7120, mload(0x7040))                    mstore(0x7140, mload(0x7060))mstore(0x7160, mload(0x70c0))                    mstore(0x7180, mload(0x70e0))success := and(eq(staticcall(gas(), 0x6, 0x7120, 0x80, 0x7120, 0x40), 1), success)mstore(0x71a0, mload(0xf00))                    mstore(0x71c0, mload(0xf20))mstore(0x71e0, mload(0x6380))success := and(eq(staticcall(gas(), 0x7, 0x71a0, 0x60, 0x71a0, 0x40), 1), success)mstore(0x7200, mload(0x7120))                    mstore(0x7220, mload(0x7140))mstore(0x7240, mload(0x71a0))                    mstore(0x7260, mload(0x71c0))success := and(eq(staticcall(gas(), 0x6, 0x7200, 0x80, 0x7200, 0x40), 1), success)mstore(0x7280, mload(0xf40))                    mstore(0x72a0, mload(0xf60))mstore(0x72c0, mload(0x5dc0))success := and(eq(staticcall(gas(), 0x7, 0x7280, 0x60, 0x7280, 0x40), 1), success)mstore(0x72e0, mload(0x7200))                    mstore(0x7300, mload(0x7220))mstore(0x7320, mload(0x7280))                    mstore(0x7340, mload(0x72a0))success := and(eq(staticcall(gas(), 0x6, 0x72e0, 0x80, 0x72e0, 0x40), 1), success)mstore(0x7360, 0x0b2de2b9a8a68ce1ae96700ef8c8042047455d367b1fe8cd794c172893dc33f6)                    mstore(0x7380, 0x214e7786153edc2b3d696d8280c0db185ab6043333dc0295f1759d58e04723b8)mstore(0x73a0, mload(0x5de0))success := and(eq(staticcall(gas(), 0x7, 0x7360, 0x60, 0x7360, 0x40), 1), success)mstore(0x73c0, mload(0x72e0))                    mstore(0x73e0, mload(0x7300))mstore(0x7400, mload(0x7360))                    mstore(0x7420, mload(0x7380))success := and(eq(staticcall(gas(), 0x6, 0x73c0, 0x80, 0x73c0, 0x40), 1), success)mstore(0x7440, 0x20bbf27f485c45a951af33247c9c1e29937fc756d7ac756c20eb625e480c4b09)                    mstore(0x7460, 0x22f8de8bb3c084ce5499afe2187541ba5c0745385f6bf9dbee9f323cc8f3916a)mstore(0x7480, mload(0x5e00))success := and(eq(staticcall(gas(), 0x7, 0x7440, 0x60, 0x7440, 0x40), 1), success)mstore(0x74a0, mload(0x73c0))                    mstore(0x74c0, mload(0x73e0))mstore(0x74e0, mload(0x7440))                    mstore(0x7500, mload(0x7460))success := and(eq(staticcall(gas(), 0x6, 0x74a0, 0x80, 0x74a0, 0x40), 1), success)mstore(0x7520, 0x01268f94deaf9cb02e7fbd0507cf3c584e4889bcd131adadcd8c03437293b7c0)                    mstore(0x7540, 0x09340894057f6d502a1e8af97842b05c01201066a6438ff6f9dff850beb38f68)mstore(0x7560, mload(0x5e20))success := and(eq(staticcall(gas(), 0x7, 0x7520, 0x60, 0x7520, 0x40), 1), success)mstore(0x7580, mload(0x74a0))                    mstore(0x75a0, mload(0x74c0))mstore(0x75c0, mload(0x7520))                    mstore(0x75e0, mload(0x7540))success := and(eq(staticcall(gas(), 0x6, 0x7580, 0x80, 0x7580, 0x40), 1), success)mstore(0x7600, 0x1965a22638efb42c034fd15306cfbd7726a289728579e9b682f3846a87456ed2)                    mstore(0x7620, 0x039abe4de3fc957e9dcf74295fbeae0aa960d4062dd92f48df09b18c3bbdc15d)mstore(0x7640, mload(0x5e40))success := and(eq(staticcall(gas(), 0x7, 0x7600, 0x60, 0x7600, 0x40), 1), success)mstore(0x7660, mload(0x7580))                    mstore(0x7680, mload(0x75a0))mstore(0x76a0, mload(0x7600))                    mstore(0x76c0, mload(0x7620))success := and(eq(staticcall(gas(), 0x6, 0x7660, 0x80, 0x7660, 0x40), 1), success)mstore(0x76e0, 0x23bd18570d6b6fac59bf2b6953c20fce9a685d7017c00f6d63c5b858f98a351a)                    mstore(0x7700, 0x29ce646f4583c470e0636ed30ee9c0d651db66e7ad5c525c119e496fefc24a86)mstore(0x7720, mload(0x5e60))success := and(eq(staticcall(gas(), 0x7, 0x76e0, 0x60, 0x76e0, 0x40), 1), success)mstore(0x7740, mload(0x7660))                    mstore(0x7760, mload(0x7680))mstore(0x7780, mload(0x76e0))                    mstore(0x77a0, mload(0x7700))success := and(eq(staticcall(gas(), 0x6, 0x7740, 0x80, 0x7740, 0x40), 1), success)mstore(0x77c0, 0x24f6a8563544bfd7fa6cfe41f3ed3f811ba7f7f1681f5affaeddebef0294c406)                    mstore(0x77e0, 0x2fc8ab2c08b19f075070eccf0ed226773e98d5b569f23c2e463f368d1f51a487)mstore(0x7800, mload(0x5e80))success := and(eq(staticcall(gas(), 0x7, 0x77c0, 0x60, 0x77c0, 0x40), 1), success)mstore(0x7820, mload(0x7740))                    mstore(0x7840, mload(0x7760))mstore(0x7860, mload(0x77c0))                    mstore(0x7880, mload(0x77e0))success := and(eq(staticcall(gas(), 0x6, 0x7820, 0x80, 0x7820, 0x40), 1), success)mstore(0x78a0, 0x003d09b528fcc6d29463ba9052b9cdfc8d94e17b080ca90706e5dc26ac9fe681)                    mstore(0x78c0, 0x04abf91a92ba78c12a8559dc03a388c7da2ae052e430d18e040bea51a5a6d48a)mstore(0x78e0, mload(0x5ea0))success := and(eq(staticcall(gas(), 0x7, 0x78a0, 0x60, 0x78a0, 0x40), 1), success)mstore(0x7900, mload(0x7820))                    mstore(0x7920, mload(0x7840))mstore(0x7940, mload(0x78a0))                    mstore(0x7960, mload(0x78c0))success := and(eq(staticcall(gas(), 0x6, 0x7900, 0x80, 0x7900, 0x40), 1), success)mstore(0x7980, 0x2b8b5a493baa4b4ee69a4fc140956f1c3d09ed624861cf0903c0c1c69d3421c5)                    mstore(0x79a0, 0x269d01dccbb0cd728e96f9ca800276c5fc8b84c25a65d9b393ca7d4ad1cd2a8c)mstore(0x79c0, mload(0x5ec0))success := and(eq(staticcall(gas(), 0x7, 0x7980, 0x60, 0x7980, 0x40), 1), success)mstore(0x79e0, mload(0x7900))                    mstore(0x7a00, mload(0x7920))mstore(0x7a20, mload(0x7980))                    mstore(0x7a40, mload(0x79a0))success := and(eq(staticcall(gas(), 0x6, 0x79e0, 0x80, 0x79e0, 0x40), 1), success)mstore(0x7a60, 0x1e6a3599f2a4df12309ff63d9f3e1dde8ce33b74f8ba6cd9da25fa93386bf5a6)                    mstore(0x7a80, 0x2a9ee74e46593ac7de7fcf58985b011bff4aa2ad232ab1350f3eaf1a07cf4dac)mstore(0x7aa0, mload(0x5ee0))success := and(eq(staticcall(gas(), 0x7, 0x7a60, 0x60, 0x7a60, 0x40), 1), success)mstore(0x7ac0, mload(0x79e0))                    mstore(0x7ae0, mload(0x7a00))mstore(0x7b00, mload(0x7a60))                    mstore(0x7b20, mload(0x7a80))success := and(eq(staticcall(gas(), 0x6, 0x7ac0, 0x80, 0x7ac0, 0x40), 1), success)mstore(0x7b40, 0x2b51bf855a39c8762b24543b5120a6353e69cc24e6838b1926b9cdbc493b485a)                    mstore(0x7b60, 0x131dab7cc8a0040624d1cff7d7a2cd3b33adf5b5a7543ac8caf73f9d9759353f)mstore(0x7b80, mload(0x5f00))success := and(eq(staticcall(gas(), 0x7, 0x7b40, 0x60, 0x7b40, 0x40), 1), success)mstore(0x7ba0, mload(0x7ac0))                    mstore(0x7bc0, mload(0x7ae0))mstore(0x7be0, mload(0x7b40))                    mstore(0x7c00, mload(0x7b60))success := and(eq(staticcall(gas(), 0x6, 0x7ba0, 0x80, 0x7ba0, 0x40), 1), success)mstore(0x7c20, 0x06373bbfbc2cd5a910b4ad53d486594b08c52087b2ab7fd9d5dbc404dea1a756)                    mstore(0x7c40, 0x198e179bf2c6bf1931320a36da27eaaf8feb745e6dde9185604bef820eea4889)mstore(0x7c60, mload(0x5f20))success := and(eq(staticcall(gas(), 0x7, 0x7c20, 0x60, 0x7c20, 0x40), 1), success)mstore(0x7c80, mload(0x7ba0))                    mstore(0x7ca0, mload(0x7bc0))mstore(0x7cc0, mload(0x7c20))                    mstore(0x7ce0, mload(0x7c40))success := and(eq(staticcall(gas(), 0x6, 0x7c80, 0x80, 0x7c80, 0x40), 1), success)mstore(0x7d00, 0x0917a04f6a2177813f97b80a35a3d989c33f83523905d2ffea9978180b7a659a)                    mstore(0x7d20, 0x19f863602c707d99bf530b0b715d4d6643dc5fcb47091532d33d5fe0ae29ad2a)mstore(0x7d40, mload(0x5f40))success := and(eq(staticcall(gas(), 0x7, 0x7d00, 0x60, 0x7d00, 0x40), 1), success)mstore(0x7d60, mload(0x7c80))                    mstore(0x7d80, mload(0x7ca0))mstore(0x7da0, mload(0x7d00))                    mstore(0x7dc0, mload(0x7d20))success := and(eq(staticcall(gas(), 0x6, 0x7d60, 0x80, 0x7d60, 0x40), 1), success)mstore(0x7de0, 0x08ab8c3240b539a953b9d61b9dcafe0699782b69b156d0f4315f1abc1db34491)                    mstore(0x7e00, 0x04fc08864edc7005e8284e7e4847c987d9508ee26f565aefb0b3c15f7fac59f4)mstore(0x7e20, mload(0x5f60))success := and(eq(staticcall(gas(), 0x7, 0x7de0, 0x60, 0x7de0, 0x40), 1), success)mstore(0x7e40, mload(0x7d60))                    mstore(0x7e60, mload(0x7d80))mstore(0x7e80, mload(0x7de0))                    mstore(0x7ea0, mload(0x7e00))success := and(eq(staticcall(gas(), 0x6, 0x7e40, 0x80, 0x7e40, 0x40), 1), success)mstore(0x7ec0, 0x13cfc9781f6f26151cda42d8c2df319911174d2112fe64c960e0b9a251d83f6b)                    mstore(0x7ee0, 0x198bf4a2ca0fdef579786e2a54dda27736e97465cdaa2be4bfeb8ec6a666d1a6)mstore(0x7f00, mload(0x5f80))success := and(eq(staticcall(gas(), 0x7, 0x7ec0, 0x60, 0x7ec0, 0x40), 1), success)mstore(0x7f20, mload(0x7e40))                    mstore(0x7f40, mload(0x7e60))mstore(0x7f60, mload(0x7ec0))                    mstore(0x7f80, mload(0x7ee0))success := and(eq(staticcall(gas(), 0x6, 0x7f20, 0x80, 0x7f20, 0x40), 1), success)mstore(0x7fa0, 0x10deced5278560ec7e97a67635606f02aa9ae960077912b9e9d1a2a0b95ffbbf)                    mstore(0x7fc0, 0x1d6d5a5d8e33d063bcb4d6b229a2118a25bcdf6cfa749d15e6fc8f420124dfb8)mstore(0x7fe0, mload(0x5fa0))success := and(eq(staticcall(gas(), 0x7, 0x7fa0, 0x60, 0x7fa0, 0x40), 1), success)mstore(0x8000, mload(0x7f20))                    mstore(0x8020, mload(0x7f40))mstore(0x8040, mload(0x7fa0))                    mstore(0x8060, mload(0x7fc0))success := and(eq(staticcall(gas(), 0x6, 0x8000, 0x80, 0x8000, 0x40), 1), success)mstore(0x8080, 0x09d1127b9fd46db1811d5e2aff86333da11455c101eb1123347f3c6b31dba9c6)                    mstore(0x80a0, 0x116574f677c6a93f80671c34f12213e115c454a941a89c7a2588df3366a9d7f9)mstore(0x80c0, mload(0x5fc0))success := and(eq(staticcall(gas(), 0x7, 0x8080, 0x60, 0x8080, 0x40), 1), success)mstore(0x80e0, mload(0x8000))                    mstore(0x8100, mload(0x8020))mstore(0x8120, mload(0x8080))                    mstore(0x8140, mload(0x80a0))success := and(eq(staticcall(gas(), 0x6, 0x80e0, 0x80, 0x80e0, 0x40), 1), success)mstore(0x8160, 0x2ebca94b9097b2a78e4fc6c89bf77f37a1cebaee1ec430d2857a0db83cf2e619)                    mstore(0x8180, 0x08a1ccb22200621ee87390aa87b832df4c4c63b08577b352a209e6ac9fc78a14)mstore(0x81a0, mload(0x5fe0))success := and(eq(staticcall(gas(), 0x7, 0x8160, 0x60, 0x8160, 0x40), 1), success)mstore(0x81c0, mload(0x80e0))                    mstore(0x81e0, mload(0x8100))mstore(0x8200, mload(0x8160))                    mstore(0x8220, mload(0x8180))success := and(eq(staticcall(gas(), 0x6, 0x81c0, 0x80, 0x81c0, 0x40), 1), success)mstore(0x8240, 0x013c128400333191072ae7efbd477f39ea373b63d323a9b8b839218483130777)                    mstore(0x8260, 0x17cc8a38ae931ddbac03e5cc2486cc7a122df6d3e326c21043c3e72c0d9ebd93)mstore(0x8280, mload(0x6000))success := and(eq(staticcall(gas(), 0x7, 0x8240, 0x60, 0x8240, 0x40), 1), success)mstore(0x82a0, mload(0x81c0))                    mstore(0x82c0, mload(0x81e0))mstore(0x82e0, mload(0x8240))                    mstore(0x8300, mload(0x8260))success := and(eq(staticcall(gas(), 0x6, 0x82a0, 0x80, 0x82a0, 0x40), 1), success)mstore(0x8320, 0x07cc5559fa1d1d0fe867764a77a5e3675cf1605667faf6b9b2ece9acdaa8bd04)                    mstore(0x8340, 0x113e1027d5002753d80fe7b2073f41bf713b932c628ebd2800e1fe2d21eff176)mstore(0x8360, mload(0x6020))success := and(eq(staticcall(gas(), 0x7, 0x8320, 0x60, 0x8320, 0x40), 1), success)mstore(0x8380, mload(0x82a0))                    mstore(0x83a0, mload(0x82c0))mstore(0x83c0, mload(0x8320))                    mstore(0x83e0, mload(0x8340))success := and(eq(staticcall(gas(), 0x6, 0x8380, 0x80, 0x8380, 0x40), 1), success)mstore(0x8400, 0x03693ae83cba0387056dd9cafad5402b754ba8ac6e54c9af76e6fa459d299f7c)                    mstore(0x8420, 0x28fa603810c92be2f542686d52ed71e794055df1eb0659f9a21d162dec0dd59c)mstore(0x8440, mload(0x6040))success := and(eq(staticcall(gas(), 0x7, 0x8400, 0x60, 0x8400, 0x40), 1), success)mstore(0x8460, mload(0x8380))                    mstore(0x8480, mload(0x83a0))mstore(0x84a0, mload(0x8400))                    mstore(0x84c0, mload(0x8420))success := and(eq(staticcall(gas(), 0x6, 0x8460, 0x80, 0x8460, 0x40), 1), success)mstore(0x84e0, 0x13ab267051d6a77d28fee208708d3b7e8bb36637e441724a5cb96095ed50187a)                    mstore(0x8500, 0x262f5493e2aa9d750f56a70fa203b4658b7c9c058097abc6f205bc05941da0aa)mstore(0x8520, mload(0x6060))success := and(eq(staticcall(gas(), 0x7, 0x84e0, 0x60, 0x84e0, 0x40), 1), success)mstore(0x8540, mload(0x8460))                    mstore(0x8560, mload(0x8480))mstore(0x8580, mload(0x84e0))                    mstore(0x85a0, mload(0x8500))success := and(eq(staticcall(gas(), 0x6, 0x8540, 0x80, 0x8540, 0x40), 1), success)mstore(0x85c0, 0x01a7837e6470babb230978a3079af34e382588caaf1c0c791e81f37222798929)                    mstore(0x85e0, 0x155c9bea95acf37b018196229c82254163940010ab902b96a4dcde67c6a99a6f)mstore(0x8600, mload(0x6080))success := and(eq(staticcall(gas(), 0x7, 0x85c0, 0x60, 0x85c0, 0x40), 1), success)mstore(0x8620, mload(0x8540))                    mstore(0x8640, mload(0x8560))mstore(0x8660, mload(0x85c0))                    mstore(0x8680, mload(0x85e0))success := and(eq(staticcall(gas(), 0x6, 0x8620, 0x80, 0x8620, 0x40), 1), success)mstore(0x86a0, 0x0ab812265e24b6b4dfc5d2eadcbc45564337589f5e46f19abae066110c42c346)                    mstore(0x86c0, 0x000107ad9ffad4a22400f05f13dcd4903a9ee28e4130a60982fcd696668e2ad2)mstore(0x86e0, mload(0x60a0))success := and(eq(staticcall(gas(), 0x7, 0x86a0, 0x60, 0x86a0, 0x40), 1), success)mstore(0x8700, mload(0x8620))                    mstore(0x8720, mload(0x8640))mstore(0x8740, mload(0x86a0))                    mstore(0x8760, mload(0x86c0))success := and(eq(staticcall(gas(), 0x6, 0x8700, 0x80, 0x8700, 0x40), 1), success)mstore(0x8780, mload(0x11e0))                    mstore(0x87a0, mload(0x1200))mstore(0x87c0, mload(0x60c0))success := and(eq(staticcall(gas(), 0x7, 0x8780, 0x60, 0x8780, 0x40), 1), success)mstore(0x87e0, mload(0x8700))                    mstore(0x8800, mload(0x8720))mstore(0x8820, mload(0x8780))                    mstore(0x8840, mload(0x87a0))success := and(eq(staticcall(gas(), 0x6, 0x87e0, 0x80, 0x87e0, 0x40), 1), success)mstore(0x8860, mload(0x1220))                    mstore(0x8880, mload(0x1240))mstore(0x88a0, mload(0x60e0))success := and(eq(staticcall(gas(), 0x7, 0x8860, 0x60, 0x8860, 0x40), 1), success)mstore(0x88c0, mload(0x87e0))                    mstore(0x88e0, mload(0x8800))mstore(0x8900, mload(0x8860))                    mstore(0x8920, mload(0x8880))success := and(eq(staticcall(gas(), 0x6, 0x88c0, 0x80, 0x88c0, 0x40), 1), success)mstore(0x8940, mload(0x1260))                    mstore(0x8960, mload(0x1280))mstore(0x8980, mload(0x6100))success := and(eq(staticcall(gas(), 0x7, 0x8940, 0x60, 0x8940, 0x40), 1), success)mstore(0x89a0, mload(0x88c0))                    mstore(0x89c0, mload(0x88e0))mstore(0x89e0, mload(0x8940))                    mstore(0x8a00, mload(0x8960))success := and(eq(staticcall(gas(), 0x6, 0x89a0, 0x80, 0x89a0, 0x40), 1), success)mstore(0x8a20, mload(0x12a0))                    mstore(0x8a40, mload(0x12c0))mstore(0x8a60, mload(0x6120))success := and(eq(staticcall(gas(), 0x7, 0x8a20, 0x60, 0x8a20, 0x40), 1), success)mstore(0x8a80, mload(0x89a0))                    mstore(0x8aa0, mload(0x89c0))mstore(0x8ac0, mload(0x8a20))                    mstore(0x8ae0, mload(0x8a40))success := and(eq(staticcall(gas(), 0x6, 0x8a80, 0x80, 0x8a80, 0x40), 1), success)mstore(0x8b00, mload(0x12e0))                    mstore(0x8b20, mload(0x1300))mstore(0x8b40, mload(0x6140))success := and(eq(staticcall(gas(), 0x7, 0x8b00, 0x60, 0x8b00, 0x40), 1), success)mstore(0x8b60, mload(0x8a80))                    mstore(0x8b80, mload(0x8aa0))mstore(0x8ba0, mload(0x8b00))                    mstore(0x8bc0, mload(0x8b20))success := and(eq(staticcall(gas(), 0x6, 0x8b60, 0x80, 0x8b60, 0x40), 1), success)mstore(0x8be0, mload(0x1140))                    mstore(0x8c00, mload(0x1160))mstore(0x8c20, mload(0x6160))success := and(eq(staticcall(gas(), 0x7, 0x8be0, 0x60, 0x8be0, 0x40), 1), success)mstore(0x8c40, mload(0x8b60))                    mstore(0x8c60, mload(0x8b80))mstore(0x8c80, mload(0x8be0))                    mstore(0x8ca0, mload(0x8c00))success := and(eq(staticcall(gas(), 0x6, 0x8c40, 0x80, 0x8c40, 0x40), 1), success)mstore(0x8cc0, mload(0x19e0))                    mstore(0x8ce0, mload(0x1a00))mstore(0x8d00, mload(0x6800))success := and(eq(staticcall(gas(), 0x7, 0x8cc0, 0x60, 0x8cc0, 0x40), 1), success)mstore(0x8d20, mload(0x8c40))                    mstore(0x8d40, mload(0x8c60))mstore(0x8d60, mload(0x8cc0))                    mstore(0x8d80, mload(0x8ce0))success := and(eq(staticcall(gas(), 0x6, 0x8d20, 0x80, 0x8d20, 0x40), 1), success)mstore(0x8da0, mload(0x1a20))                    mstore(0x8dc0, mload(0x1a40))mstore(0x8de0, mload(0x6840))success := and(eq(staticcall(gas(), 0x7, 0x8da0, 0x60, 0x8da0, 0x40), 1), success)mstore(0x8e00, mload(0x8d20))                    mstore(0x8e20, mload(0x8d40))mstore(0x8e40, mload(0x8da0))                    mstore(0x8e60, mload(0x8dc0))success := and(eq(staticcall(gas(), 0x6, 0x8e00, 0x80, 0x8e00, 0x40), 1), success)mstore(0x8e80, mload(0x1a60))                    mstore(0x8ea0, mload(0x1a80))mstore(0x8ec0, mload(0x6880))success := and(eq(staticcall(gas(), 0x7, 0x8e80, 0x60, 0x8e80, 0x40), 1), success)mstore(0x8ee0, mload(0x8e00))                    mstore(0x8f00, mload(0x8e20))mstore(0x8f20, mload(0x8e80))                    mstore(0x8f40, mload(0x8ea0))success := and(eq(staticcall(gas(), 0x6, 0x8ee0, 0x80, 0x8ee0, 0x40), 1), success)mstore(0x8f60, mload(0x1aa0))                    mstore(0x8f80, mload(0x1ac0))mstore(0x8fa0, mload(0x68c0))success := and(eq(staticcall(gas(), 0x7, 0x8f60, 0x60, 0x8f60, 0x40), 1), success)mstore(0x8fc0, mload(0x8ee0))                    mstore(0x8fe0, mload(0x8f00))mstore(0x9000, mload(0x8f60))                    mstore(0x9020, mload(0x8f80))success := and(eq(staticcall(gas(), 0x6, 0x8fc0, 0x80, 0x8fc0, 0x40), 1), success)mstore(0x9040, mload(0x1a20))                    mstore(0x9060, mload(0x1a40))mstore(0x9080, mload(0x6280))success := and(eq(staticcall(gas(), 0x7, 0x9040, 0x60, 0x9040, 0x40), 1), success)mstore(0x90a0, mload(0x19e0))                    mstore(0x90c0, mload(0x1a00))mstore(0x90e0, mload(0x9040))                    mstore(0x9100, mload(0x9060))success := and(eq(staticcall(gas(), 0x6, 0x90a0, 0x80, 0x90a0, 0x40), 1), success)mstore(0x9120, mload(0x1a60))                    mstore(0x9140, mload(0x1a80))mstore(0x9160, mload(0x6520))success := and(eq(staticcall(gas(), 0x7, 0x9120, 0x60, 0x9120, 0x40), 1), success)mstore(0x9180, mload(0x90a0))                    mstore(0x91a0, mload(0x90c0))mstore(0x91c0, mload(0x9120))                    mstore(0x91e0, mload(0x9140))success := and(eq(staticcall(gas(), 0x6, 0x9180, 0x80, 0x9180, 0x40), 1), success)mstore(0x9200, mload(0x1aa0))                    mstore(0x9220, mload(0x1ac0))mstore(0x9240, mload(0x6740))success := and(eq(staticcall(gas(), 0x7, 0x9200, 0x60, 0x9200, 0x40), 1), success)mstore(0x9260, mload(0x9180))                    mstore(0x9280, mload(0x91a0))mstore(0x92a0, mload(0x9200))                    mstore(0x92c0, mload(0x9220))success := and(eq(staticcall(gas(), 0x6, 0x9260, 0x80, 0x9260, 0x40), 1), success)mstore(0x92e0, mload(0x8fc0))                    mstore(0x9300, mload(0x8fe0))mstore(0x9320, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x9340, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x9360, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x9380, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x93a0, mload(0x9260))                    mstore(0x93c0, mload(0x9280))mstore(0x93e0, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x9400, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x9420, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x9440, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x92e0, 0x180, 0x92e0, 0x20), 1), success)success := and(eq(mload(0x92e0), 1), success)} return success; } }
